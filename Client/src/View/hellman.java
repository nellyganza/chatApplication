/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import InterfaceClass.ServerInterface;
import Model.Account;
import config.config;
import java.io.File;
import java.math.BigInteger;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Arrays;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Nishimwe Elysee
 */
public class hellman extends javax.swing.JFrame {

    BigInteger primeNumber, generator, privateKey1, privateKey2, publicKey1, publicKey2, sharedsecretkey1, sharedsecretkey2;
    String cipheredText, decipheredText, username,receiver;
    config con = new config();

    /**
     * Creates new form hellman
     */
    public hellman(String username,String receiver) {
        this.username = username;
        this.receiver = receiver;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        get_1024bit_number = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        prime_number = new javax.swing.JTextArea();
        get_2040bit_number = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        same_checkBox = new javax.swing.JCheckBox();
        generator_number = new javax.swing.JTextField();
        get_generator_number = new javax.swing.JButton();
        user2_private_key = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        user1_private_key = new javax.swing.JTextField();
        user2_public_key = new javax.swing.JTextField();
        user2_recieved_key = new javax.swing.JTextField();
        user1_recieved_key = new javax.swing.JTextField();
        get_user_public_key_number = new javax.swing.JButton();
        get_private_key_number = new javax.swing.JButton();
        user1_public_key = new javax.swing.JTextField();
        user2_secret_key = new javax.swing.JTextField();
        encrypt_message = new javax.swing.JButton();
        user1_secret_key = new javax.swing.JTextField();
        are_secretKeys_identical = new javax.swing.JButton();
        SECRET_KEY = new javax.swing.JTextField();
        get_204bit_number = new javax.swing.JButton();
        get_secret_key = new javax.swing.JButton();
        get_516bit_number = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        get_1024bit_number.setText("1024");
        get_1024bit_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_1024bit_numberActionPerformed(evt);
            }
        });

        prime_number.setRows(50);
        prime_number.setTabSize(2);
        prime_number.setWrapStyleWord(true);
        prime_number.setAutoscrolls(false);
        prime_number.setMaximumSize(new java.awt.Dimension(1000, 1000));
        prime_number.setSelectionColor(new java.awt.Color(204, 204, 255));
        jScrollPane1.setViewportView(prime_number);

        get_2040bit_number.setText("2040");
        get_2040bit_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_2040bit_numberActionPerformed(evt);
            }
        });

        jLabel2.setText("GENERATE PRIME NUMBER OF HOW MANY BITS");

        same_checkBox.setText("they are the same");
        same_checkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                same_checkBoxActionPerformed(evt);
            }
        });

        generator_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generator_numberActionPerformed(evt);
            }
        });

        get_generator_number.setText("Generated random generator number");
        get_generator_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_generator_numberActionPerformed(evt);
            }
        });

        user2_private_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user2_private_keyActionPerformed(evt);
            }
        });

        jLabel1.setText("Exchanged public key");

        user1_private_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user1_private_keyActionPerformed(evt);
            }
        });

        user2_public_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user2_public_keyActionPerformed(evt);
            }
        });

        user2_recieved_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user2_recieved_keyActionPerformed(evt);
            }
        });

        user1_recieved_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user1_recieved_keyActionPerformed(evt);
            }
        });

        get_user_public_key_number.setText("calculated public key");
        get_user_public_key_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_user_public_key_numberActionPerformed(evt);
            }
        });

        get_private_key_number.setText("Randomly generated private key");
        get_private_key_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_private_key_numberActionPerformed(evt);
            }
        });

        user1_public_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user1_public_keyActionPerformed(evt);
            }
        });

        user2_secret_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user2_secret_keyActionPerformed(evt);
            }
        });

        encrypt_message.setText("Send & Save");
        encrypt_message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encrypt_messageActionPerformed(evt);
            }
        });

        user1_secret_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user1_secret_keyActionPerformed(evt);
            }
        });

        are_secretKeys_identical.setText("SECRET KEY GENERATED FROM BOTH PARTIES");
        are_secretKeys_identical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                are_secretKeys_identicalActionPerformed(evt);
            }
        });

        SECRET_KEY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SECRET_KEYActionPerformed(evt);
            }
        });

        get_204bit_number.setText("204");
        get_204bit_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_204bit_numberActionPerformed(evt);
            }
        });

        get_secret_key.setText("shared secret key");
        get_secret_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_secret_keyActionPerformed(evt);
            }
        });

        get_516bit_number.setText("516");
        get_516bit_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_516bit_numberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(are_secretKeys_identical, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(same_checkBox)
                .addGap(184, 184, 184))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(get_204bit_number, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(get_516bit_number, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(get_1024bit_number, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(get_2040bit_number, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(user1_private_key)
                                    .addComponent(user1_public_key))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(get_private_key_number, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(get_user_public_key_number, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                                        .addGap(12, 12, 12)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(user2_public_key, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                                    .addComponent(user2_private_key)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(generator_number, javax.swing.GroupLayout.PREFERRED_SIZE, 707, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(get_generator_number, javax.swing.GroupLayout.PREFERRED_SIZE, 265, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(user1_recieved_key)
                                .addGap(60, 60, 60)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(user2_recieved_key, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(user1_secret_key, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(get_secret_key, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(user2_secret_key, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(encrypt_message, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(387, 387, 387))
                            .addComponent(SECRET_KEY, javax.swing.GroupLayout.PREFERRED_SIZE, 958, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(get_204bit_number)
                    .addComponent(get_516bit_number)
                    .addComponent(get_1024bit_number)
                    .addComponent(get_2040bit_number)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generator_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(get_generator_number))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(user2_private_key, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(user1_private_key, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(get_private_key_number))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(user2_public_key, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(user1_public_key, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(get_user_public_key_number)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(user2_recieved_key, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(user1_recieved_key, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(user2_secret_key, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(user1_secret_key, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(get_secret_key)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(are_secretKeys_identical, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(same_checkBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SECRET_KEY, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(encrypt_message, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static BigInteger generate(int lenght) {
        // create a BigInteger object
        BigInteger bi;
        // create a random object
        Random rnd = new Random();
        // assign probablePrime result to bi using Length and rnd
        bi = BigInteger.probablePrime(lenght, rnd);
        return bi;
    }

    public String encrypt(String message,BigInteger sharedsecretkey) {
        String Newstr = " ";
        BigInteger n;
        try {
            for (int i = 0; i < message.length(); i++) {
                char ch = Character.toLowerCase(message.charAt(i));
                switch (ch) {
                    case 'a':
                        n = BigInteger.valueOf(1);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'b':
                        n = BigInteger.valueOf(2);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'c':
                        n = BigInteger.valueOf(3);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'd':
                        n = BigInteger.valueOf(4);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'e':
                        n = BigInteger.valueOf(5);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'f':
                        n = BigInteger.valueOf(6);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'g':
                        n = BigInteger.valueOf(7);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'h':
                        n = BigInteger.valueOf(8);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'i':
                        n = BigInteger.valueOf(9);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'j':
                        n = BigInteger.valueOf(10);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'k':
                        n = BigInteger.valueOf(11);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'l':
                        n = BigInteger.valueOf(12);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'm':
                        n = BigInteger.valueOf(13);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'n':
                        n = BigInteger.valueOf(14);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'o':
                        n = BigInteger.valueOf(15);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'p':
                        n = BigInteger.valueOf(16);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'q':
                        n = BigInteger.valueOf(17);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'r':
                        n = BigInteger.valueOf(18);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 's':
                        n = BigInteger.valueOf(19);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 't':
                        n = BigInteger.valueOf(20);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'u':
                        n = BigInteger.valueOf(21);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'v':
                        n = BigInteger.valueOf(22);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'w':
                        n = BigInteger.valueOf(23);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'x':
                        n = BigInteger.valueOf(24);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'y':
                        n = BigInteger.valueOf(25);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case 'z':
                        n = BigInteger.valueOf(26);
                        n = (n.multiply(sharedsecretkey));
                        Newstr = Newstr + n + "-";
                        break;
                    case ' ':
                        Newstr = Newstr + "$";
                        break;

                    default:
                        Newstr = Newstr + "&";
                }
            }
        } catch (Exception ioe) {
        }
        System.out.println("encrypted no vowels: " + Newstr);
        String cipherText = Newstr.replace("1", "A").replace("2", "B").replace("3", "C").replace("4", "D").replace("5", "F").replace("6", "G").replace("7", "H").replace("8", "I").replace("9", "J");
        return cipherText;

    }

    public String dencrypt(String message,BigInteger sharedsecretkey) {
        int position;
        BigInteger n, d, diff, tot;
        String Newstr = "-";
        String cipherText = message.replace("A", "1").replace("B", "2").replace("C", "3").replace("D", "4").replace("F", "5").replace("G", "6").replace("H", "7").replace("I", "8").replace("J", "9");
        System.out.println("removed vowels" + cipherText);
        String str[] = cipherText.split("-");
        System.out.println(Arrays.toString(str));
        String alpha[] = {"-", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"};

        diff = BigInteger.valueOf(7);
        tot = BigInteger.valueOf(23);

        for (String str1 : str) {
            String str2 = str1.replace(" ", "");
            System.out.println(str2);
            n = new BigInteger(str2);
            d = (n.divide(sharedsecretkey));
            System.out.println("position: " + d);
            position = d.intValue();
            Newstr = Newstr + alpha[position];
        }
        System.out.println(Newstr);
        return Newstr.replace("-", "");
    }


    private void get_1024bit_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_1024bit_numberActionPerformed
        primeNumber = generate(1024);
        prime_number.setText(primeNumber.toString());
    }//GEN-LAST:event_get_1024bit_numberActionPerformed

    private void get_2040bit_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_2040bit_numberActionPerformed
        primeNumber = generate(2040);
        prime_number.setText(primeNumber.toString());
    }//GEN-LAST:event_get_2040bit_numberActionPerformed

    private void same_checkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_same_checkBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_same_checkBoxActionPerformed

    private void generator_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generator_numberActionPerformed
        // textfield for generator:
    }//GEN-LAST:event_generator_numberActionPerformed

    private void get_generator_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_generator_numberActionPerformed
        long random_num = (long) Math.floor(Math.random() * (10000));
        generator = BigInteger.valueOf(random_num);
        generator_number.setText(generator.toString());
    }//GEN-LAST:event_get_generator_numberActionPerformed

    private void user2_private_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user2_private_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user2_private_keyActionPerformed

    private void user1_private_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user1_private_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user1_private_keyActionPerformed

    private void user2_public_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user2_public_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user2_public_keyActionPerformed

    private void user2_recieved_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user2_recieved_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user2_recieved_keyActionPerformed

    private void user1_recieved_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user1_recieved_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user1_recieved_keyActionPerformed

    private void get_user_public_key_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_user_public_key_numberActionPerformed
        publicKey1 = generator.modPow(privateKey1, primeNumber);
        publicKey2 = generator.modPow(privateKey2, primeNumber);
        user1_public_key.setText(publicKey1.toString());
        user2_public_key.setText(publicKey2.toString());
        user1_recieved_key.setText(publicKey2.toString());
        user2_recieved_key.setText(publicKey1.toString());
    }//GEN-LAST:event_get_user_public_key_numberActionPerformed

    private void get_private_key_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_private_key_numberActionPerformed
        long random_num1 = (long) Math.floor(Math.random() * (1000000));
        long random_num2 = (long) Math.floor(Math.random() * (1000000));
        privateKey1 = BigInteger.valueOf(random_num1);
        privateKey2 = BigInteger.valueOf(random_num2);
        user1_private_key.setText(privateKey1.toString());
        user2_private_key.setText(privateKey2.toString());
        // TODO add your handling code here:
    }//GEN-LAST:event_get_private_key_numberActionPerformed

    private void user1_public_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user1_public_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user1_public_keyActionPerformed

    private void user2_secret_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user2_secret_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user2_secret_keyActionPerformed

    private void encrypt_messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encrypt_messageActionPerformed
//        String msg = message_to_encrypt.getText();
//        cipheredText = encrypt(msg);
//        encrypted_message.setText(cipheredText);

        try {
            Registry registry = LocateRegistry.getRegistry(con.getSERVER_IP(), con.getRMIPORT());
            ServerInterface accdao = (ServerInterface) registry.lookup("ServerAccount");
            Account acc = accdao.findByUsername(username).get(0);
            Account acc1 = accdao.findByUsername(receiver).get(0);
//            acc.setClientSecreteKey(privateKey1);
            acc.setClickPublicKey(sharedsecretkey2.toString());
            acc1.setClickPublicKey(sharedsecretkey2.toString());
            accdao.updateAccount(acc);
            accdao.updateAccount(acc1);
            JOptionPane.showMessageDialog(this, "Public key shared");
            this.hide();
        } catch (RemoteException | NotBoundException ex) {
            Logger.getLogger(AccountView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_encrypt_messageActionPerformed

    private void user1_secret_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user1_secret_keyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user1_secret_keyActionPerformed

    private void are_secretKeys_identicalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_are_secretKeys_identicalActionPerformed
        // TODO add your handling code here:
        if (sharedsecretkey1.equals(sharedsecretkey2)) {
            same_checkBox.setSelected(true);
            SECRET_KEY.setText(sharedsecretkey1.toString());
        }
    }//GEN-LAST:event_are_secretKeys_identicalActionPerformed

    private void SECRET_KEYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SECRET_KEYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SECRET_KEYActionPerformed

    private void get_204bit_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_204bit_numberActionPerformed
        primeNumber = generate(204);
        prime_number.setText(primeNumber.toString());
    }//GEN-LAST:event_get_204bit_numberActionPerformed

    private void get_secret_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_secret_keyActionPerformed
        // TODO add your handling code here:
        //user1_secret_key
        sharedsecretkey1 = publicKey2.modPow(privateKey1, primeNumber);
        sharedsecretkey2 = publicKey1.modPow(privateKey2, primeNumber);
        user1_secret_key.setText(sharedsecretkey1.toString());
        user2_secret_key.setText(sharedsecretkey2.toString());
        publicKey2 = generator.modPow(privateKey2, primeNumber);

    }//GEN-LAST:event_get_secret_keyActionPerformed

    private void get_516bit_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_516bit_numberActionPerformed
        primeNumber = generate(516);
        prime_number.setText(primeNumber.toString());
    }//GEN-LAST:event_get_516bit_numberActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hellman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hellman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hellman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hellman.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new hellman("","").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField SECRET_KEY;
    private javax.swing.JButton are_secretKeys_identical;
    private javax.swing.JButton encrypt_message;
    private javax.swing.JTextField generator_number;
    private javax.swing.JButton get_1024bit_number;
    private javax.swing.JButton get_2040bit_number;
    private javax.swing.JButton get_204bit_number;
    private javax.swing.JButton get_516bit_number;
    private javax.swing.JButton get_generator_number;
    private javax.swing.JButton get_private_key_number;
    private javax.swing.JButton get_secret_key;
    private javax.swing.JButton get_user_public_key_number;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea prime_number;
    private javax.swing.JCheckBox same_checkBox;
    private javax.swing.JTextField user1_private_key;
    private javax.swing.JTextField user1_public_key;
    private javax.swing.JTextField user1_recieved_key;
    private javax.swing.JTextField user1_secret_key;
    private javax.swing.JTextField user2_private_key;
    private javax.swing.JTextField user2_public_key;
    private javax.swing.JTextField user2_recieved_key;
    private javax.swing.JTextField user2_secret_key;
    // End of variables declaration//GEN-END:variables
}
